services:
  # Database Services
  postgres:
    container_name: postgres
    image: postgres:14
    environment:
      POSTGRES_USER: jashuu
      POSTGRES_PASSWORD: jashuu
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
      - ./init-multi-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - backend
    restart: unless-stopped

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - backend
    restart: unless-stopped

  mongo:
    container_name: mongo
    image: mongodb/mongodb-community-server:7.0.1-ubuntu2204
    mem_limit: 700mb
    ports:
      - "27017:27017"
    networks:
      - backend
    volumes:
      - mongodb_data:/data/db
    restart: unless-stopped

  redis:
    container_name: redis_container
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - backend
    volumes:
      - redis:/data/gateway
    restart: unless-stopped

  # Message Brokers
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    depends_on:
      - zookeeper
    networks:
      - backend
    healthcheck:
      test: ["CMD", "bash", "-c", "nc -z localhost 9092"]
      interval: 15s
      timeout: 10s
      retries: 3

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:4-management
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_DEFAULT_VHOST: guest
    ports:
      - "5672:5672" #RabbitMQ message broker
      - "15672:15672" #RabbitMQ Management UI (http://localhost:15672)
    networks:
      - backend
    restart: unless-stopped

  # Identity & Security
  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:26.3.2
    mem_limit: 700mb
    ports:
      - "8443:8080"
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
    command: [ "start-dev" ]
    volumes:
      - keycloak_data:/opt/keycloak/data
    networks:
      - backend

  # observability and distributed tracing setup
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - loki
      - backend

  read:
    image: grafana/loki:latest
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../../grafana-prometheus/logging/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      loki:
        aliases:
          - loki

  write:
    image: grafana/loki:latest
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../../grafana-prometheus/logging/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  alloy:
    image: grafana/alloy:latest
    volumes:
      - ../../grafana-prometheus/logging/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./logs:/logs-parent:ro
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 12345:12345
    depends_on:
      - gateway
    networks:
      - loki

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    networks:
      - loki

  prometheus:
    image: prom/prometheus:v2.44.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../../grafana-prometheus/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - loki

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
          - name: Loki
            type: loki
            access: proxy
            url: http://gateway:3100
            jsonData:
              httpHeaderName1: "X-Scope-OrgID"
            secureJsonData:
              httpHeaderValue1: "tenant1"
        EOF
        /run.sh
    ports:
      - "3000:3000"
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ../../grafana-prometheus/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - loki

  backend:
    image: grafana/loki:latest
    volumes:
      - ../../grafana-prometheus/logging/loki-config.yaml:/etc/loki/config.yaml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    networks:
      - loki

  gateway:
    image: nginx:latest
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - loki

  flog:
    image: mingrammer/flog
    command: -f json -d 200ms -l
    networks:
      - loki

  # Microservices Infrastructure
  # Config-service
  config-service:
    #build: ../../config-service
    image: jashwanthreddymr/config-service:version-1.0
    container_name: config-service
    ports:
      - "8080:8080"
    networks:
      - backend
    environment:
      #- SPRING_PROFILES_ACTIVE=docker
      - SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCH_LOCATIONS=/config
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USERNAME=${RABBITMQ_USERNAME}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST}
    volumes:
      - ../../config-service/src/main/resources/config:/config
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://localhost:8080/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  #eureka-service
  eureka-service:
    #build: ../../eureka-service
    image: jashwanthreddymr/eureka-service:version-1.0
    container_name: eureka-service
    ports:
      - "8761:8761"
    networks:
      - backend
    depends_on:
      config-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://localhost:8761/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # api-gateway
  api-gateway:
    #build: ../../api-gateway
    image: jashwanthreddymr/api-gateway:version-1.0
    container_name: api-gateway
    ports:
      - "8085:8085"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      config-service:
        condition: service_healthy
      eureka-service:
        condition: service_healthy
      mongo:
        condition: service_started
      rabbitmq:
        condition: service_started
      keycloak:
        condition: service_started
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://localhost:8085/actuator/health" ]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # user-service
  user-service:
    #build: ../../user-service
    image: jashwanthreddymr/user-service:version-1.0
    container_name: user-service
#    ports:
#      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - MONGO_URI=mongodb://mongo:27017/User-Service?authSource=admin
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USERNAME=${RABBITMQ_USERNAME}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST}
      - KEYCLOAK_ADMIN_USERNAME=jashwanth
      - KEYCLOAK_ADMIN_PASSWORD=jashwanth
      - KEYCLOAK_ADMIN_URL=http://keycloak:8080
      - KEYCLOAK_ADMIN_REALM=mj-ecom
      - KEYCLOAK_ADMIN_CLIENT_ID=oauth2-pkce
      - KEYCLOAK_ADMIN_CLIENT_UID=994b19fb-3436-4442-8cc2-837d994c9412
    depends_on:
      config-service:
        condition: service_healthy
      eureka-service:
        condition: service_healthy
      mongo:
        condition: service_started
      rabbitmq:
        condition: service_started
      keycloak:
        condition: service_started
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://localhost:8082/actuator/health" ]
      interval: 15s
      timeout: 10s
      retries: 3
    restart: on-failure

  #product-service
  product-service:
    #build: ../../product-service
    image: jashwanthreddymr/product-service:version-1.0
    container_name: product-service
    networks:
      - backend
#    ports:
#      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USERNAME=${RABBITMQ_USERNAME}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST}
    depends_on:
      config-service:
        condition: service_healthy
      eureka-service:
        condition: service_healthy
      postgres:
        condition: service_started
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://localhost:8083/actuator/health" ]
      interval: 15s
      timeout: 10s
      retries: 3
    restart: on-failure

  #order-service
  order-service:
    #build: ../../order-service
    image: jashwanthreddymr/order-service:version-1.0
    container_name: order-service
    networks:
      - backend
#    ports:
#      - "8084:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/orderdb
      - SPRING_DATASOURCE_USERNAME=jashuu
      - SPRING_DATASOURCE_PASSWORD=jashuu
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.postgresql.Driver
    depends_on:
      config-service:
        condition: service_healthy
      eureka-service:
        condition: service_healthy
      postgres:
        condition: service_started
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://localhost:8084/actuator/health" ]
      interval: 15s
      timeout: 10s
      retries: 3
    restart: on-failure

  #notification-service
  notification-service:
    #build: ../../notification-service
    image: jashwanthreddymr/notification-service:version-1.0
    container_name: notification-service
    networks:
      - backend
    environment:
      - SPRING_PROFILES_ACTIVE=docker
#    ports:
#      - "8086:8086"
    depends_on:
      config-service:
        condition: service_healthy
      eureka-service:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://localhost:8086/actuator/health" ]
      interval: 15s
      timeout: 10s
      retries: 3
    restart: on-failure

networks:
  backend:
    driver: bridge
  mongodb:
    driver: bridge
  loki:

volumes:
  postgres:
  pgadmin:
  mongodb_data:
  redis:
  keycloak_data:
